[bot]
// ###########################
// USER CONFIGURABLE OPTIONS
// ###########################

// -----------
// Buy Amount
// -----------
// Set the amount you want to use for buying. This will use the entire amount specified for each buy.
buy_amount = 100

// ---------------
// Desired Profit 
// ---------------
// Set profit amount in dollars. This is how much you want to profit, in dollars
// This is a target, not a guarantee
profit_usd = 1

// Minimal profit to make, For curve type, specify percentage instead of whole dollar amount, minimial profit
profit_pct = .10

// -----------
// Product ID
// -----------
product_id = BTC-USD

// -----------
// Start Hold
// -----------
// How long on startup we hold buys to seed price history. Recommended at least 3 minutes,
// do not exceed 900 seconds
start_hold_startup_delay = 15

// --------------------------
// Market/Limit transactions
// --------------------------
// Market transactions are real-time, but come with fees. The problem 
// with the fees is the bot needs to cover a "spread" to cover the fee, and 
// this makes it harder to achieve buys/sells.
//
// The limit type will allow no fees and should enable more buys and sells. However,
// limit types have less flexibility when it comes to making more money during climbs, and
// may not always trigger a buy and sell at the specified time/amount. limit is currently exprimental
//
// Curve is very experimental. Will try to detect and buy at the end of drops, and sell at the detected peaks.
// Types: market | limit | curve
buy_type = curve

// ----------
// Sink Rate
// ----------
// Minimum drop in percent before doing a buy. If drop continues, will wait until hits the bottom.
// In other words, how long the red down candle should travel before deciding to buy, think of this
// setting that way. The larger the number, the longer a downward trend has to exist before buying.
// Keep this very low, as in thousands to hundreths of a value.
sink_rate = false
pct_drop_buy_min = .0001

// ------------------
// Dynamic Sink Rate
// ------------------
// Calculate the sink rate on these factors:
//   - The current slope rates
//   - The difference in price from the current price to the 
//     optimal sale price
//   Ignores sink rate setting
dynamic_sink_rate = true
dynamic_sink_rate_modifier = 1

// How much percentage to alter the sink rate when a drop is detected
dynamic_sink_rate_drop_modifier = 1.1

// Modifier for the dynamic sink rate
// ---
//sink_rate_limit_modifier = 1

// ------------------
// Manual trend gap
// ------------------
// The percentage of change for determining trend state
pct_change_threshold = .001

// ----------
// Trend Gap
// ----------
// Set the number that should be used to detect a trend. This is per poll,
// so the amount of up or downticks before deciding this is a "trend"
trend_tick_threshold = 3

// ------------------
// Dynamic Trend Gap
// ------------------
// During a drop, dynamically increase increase the trend gap after your sink rate threshold is met.
// This is to provide better protection against buying too early during a dramatic dip. Trend gap
// will be reset to the standard value after a solid uptrend is recognized.
dynamic_trend = true

// ------------------
// Dynamic Buy Price
// ------------------
// When true, the buys will use a protection feature to buy at a much lower price than normal
// when drops are detected, and then slowly scale that buy up over time, if no drops are
// detected
dynamic_buy_price = true
dynamic_buy_price_modifier = 0

// Price difference in percent of the bought price we will use
// to re-order at
dynamic_buy_price_scale_factor = 61

// The percentage difference in price from the first historical price in the tactical history
// and the current price to avoid a buy
dynamic_buy_price_downslope_percent = 5

// ----------------
// Always Buy/Sell
// ---------------- 
// Truly for the adventurous, this mode ignores all other statistical methodologies
// such as sink rate and drop types and just buy's at any opportunity given
// as long as there are no buy holds.
always_buy = true
always_sell = false


// -----------
// STOP limit
// -----------
// Set the stop limit for any more trades. Represents the amount of USD
// in your USD wallet you want to make sure you keep, in the case of 
// a losing streak
usd_wallet_trade_stop = 400

// -----------------
// Climb the ladder
// -----------------
// Set to true if you want the bot to follow an uptick trend instead of selling at the 
// set profit amount
climb_the_ladder = true
climb_the_ladder_slope = 15

// The "scale" factor to use when calculating a slope. Default 200, lower
// numbers will lower the slopes, this number is divided by the current price
// to set the scale
slope_scale_factor = 100

// ----------------------
// Limit order threshold
// ---------------------- 
// Set the slope rate that a limit buy should NOT take place at. This uses
// the total slope rate value to compare against
slope_limit_order_threshold = -20


// ----------------
// Acceptable Loss
// ----------------
// Set the acceptable loss in dollars, for auto-recovery on bad trades
acceptable_loss = .10

// -----------
// Sell Rules
// -----------
// How many times to retry sell order if rejected (often rejected due to post only rules)
sell_order_retry = 5

// How much to increment the price of the sell order on retry
sell_order_retry_price_alter = .05

// How long a live profit has to be stalled before immediately trying to sell at that price
// in seconds
sell_order_live_profit_stale = 10

// -----------------------------------------
// Buy Recovery
// -----------------------------------------
monitor_open_buy = true

// Time to pass before deciding to check the status of the open buy order, in seconds
open_buy_order_stale = 60

// How close in percentage the current price can be to the buying price order
// to pass on canceling and re-ordering. Do not add a percent sign, dummy.
open_buy_reset_threshold_percent= .25


// -------------------
// Sell Recovery
// -------------------
sell_order_recovery = true

// How often we check for stuck sales
sell_order_check_interval = 14400

// Percent of the price drop we choose to recover
sell_order_recover_threshold = 1.1

// Sell order type, market/limit
sell_order_recovery_type = market

// If we rebuy afer selling or not
sell_order_recover_rebuy = false

// Percent of profit to rebuy at when trying a normal recovery
sell_order_recover_rebuy_price = 100

// The price difference in percent from the buy price to the current price
// where we decide to sell immediately 
sell_order_instant_recover_threshold = 3

// The new buy price during instant recover, percent of current price
sell_order_instant_recover_rebuy_price = .001

// Amount of time to check in between instant recovery situations
sell_order_instant_recover_interval = 4500

// Override the acceptable loss if bot deems this could be an emergency
sell_order_emergency_instant_recover_max_loss = 5

// ----------------
// Bought Recovery
// ----------------
monitor_open_bought = true

// Threshold in percent
open_bought_instant_sell_threshold = 5%

// How often to check
open_bought_check_interval = 10000

// Recovery type market/limit
open_bought_recovery_type = market


// ---------------------------
// Consecutive Buy/Sell Limit
// ---------------------------
// Determine how many consecutive buy-win sells can take place before putting on a buy hold.
// This is useful because usually after about 3 consecutive buys on a climbing streak, there is a loss.
// May be helpful in preventing losses. Buys will be held after this limit until. If you want to not
// have any limits at all, tough shit. But, you can just make the number insanely high, like a million bajillion
// 
// 1  - Safest
// 2  - Pretty safe
// 3  - Risk taker
// 4+ - You're on your own
consecutive_sell_limit = 1
consecutive_sell_limit_threshold = .75

// --------------
// Drop Recovery
// --------------
drop_recovery = true

// percent to drop before recovering, percent
drop_recovery_threshold = 5

// percent to drop before selling on hold
drop_on_hold_recovery_threshold = 5

// Time to hold buying after recovery
drop_recovery_buy_hold = 1800


// ------------
// Hold On Sell
// ------------
// Decide if to do a buy hold after selling, and for how long (in seconds)
hold_on_sell = false
hold_on_sell_time_limit = 0


// ----------
// Test Mode
// ----------
// Throw the bot into test mode. No buys or sells will actually take place, just a log of fake ones.
test_mode = false
hold_connection_on_file = /tmp/bitbot







// ##############
// ADMIN OPTIONS
// ##############

// -------
// Bot ID
// -------
// Name your bot. Must be unique to all other bots.
bot_id="ConanEther"

// ---------------
// Drop detection
// ---------------
// Detect drops

// Amount of seconds to go back for checking drops
drop_detection_history = 30
large_drop_detection_history = 300

// Percent that should trigger a drop.
drop_detection_threshold = .07

// Percent that should trigger large drops
large_drop_detection_threshold = .6

// ----------------
// Spike Detection
// ----------------
// Detects large increases
//
// Amount of seconds to go back for checking spikes
spike_detection_history = 10
large_spike_detection_history = 120

// Percent that should trigger a spike.
spike_detection_threshold = .15

// Percent that should trigger large spikes
large_spike_detection_threshold = .6

// -----------------------------------
// Poll interval for non-stream calls
// -----------------------------------
poll_interval = 600

// -------------------
// Rate limit timeout
// -------------------
// Amount of time to wait for certain web calls, to prevent rate limiting
// in microseconds
rate_limit_timeout = 1000

// ---------
// Log file
// ---------
logfile = log/bitbot/bitbot.log
log_to_console = false
transaction_logfile = log/bitbot/transaction.log
stats_log = log/bitbot/stats.log
price_history_log = log/bitbot/price_history.log

// ----------------
// Transaction fee
// ----------------
buy_fee = .25
sell_fee = .25

// ---------------
// Slope Interval
// ---------------
// Set the amount of time between scanning the slope, in ms
slope_interval = 5000

// ----------------------
// History
// ----------------------
// Set how far back in time we check to measure our slope for
// realtime analysis, in seconds
history = 900

// ---------------------------------
// History Timeslice
// ---------------------------------
// Specific to gdax, set the amount of time units in seconds to get the history for
// equal to the 1, 15m, 1hr on the gdax display. Keep at 60 for now
history_gran = 60

// --------------
// Price History
// --------------
// Set the amount of seconds to hold. Must be at least 60
price_history_seconds = 900

// -------------------------
// Curves Buy Type Settings
// -------------------------
curve_warning_drop_threshold = .01
curve_started_drop_threshold = .001
curve_dropping_drop_threshold = .2
curve_close_drop_threshold = .05
curve_reached_drop_drop_threshold = .02
curve_history_drop_limits = 1000
curve_buy_drop_drop_amount = .01

curve_warning_peak_threshold = .01
curve_started_peak_threshold = .001
curve_dropping_peak_threshold = .2
curve_close_peak_threshold = .05
curve_reached_peak_threshold = .02
curve_history_peak_limits = 1000
curve_buy_drop_peak_amount = .01

curve_close_drop_history = 60
curve_close_peak_history = 140

curve_reached_drop_history = 30
curve_reached_peak_history = 30

curve_buy_price = .01
curve_sell_price = .01
curve_sale_stale = 10

curve_sell_decrement_stale = 300
curve_sell_decrement_interval = 5
curve_sell_decrement_amount = .01

// -------------------------
// Curve Drop Rate Modifier
// -------------------------
curve_dynamic_drop = true
curve_negative_drop_slope = -45
curve_positive_drop_slope = 20

// Keep at 4000 for good performance
curve_drop_rate_modifier = 3000
curve_secondary_drop_rate_modifier = 10000

// -----------------
// Selloff Settings
// -----------------
selloff_recovery = false
hold_on_selloff = true

// Selloff type slope/percent
selloff_recovery_type = slope
selloff_recovery_wait_time = 10
selloff_recovery_post_wait_time = 1800

// Selloff slope settings
oneHr_selloff_factor = -60
tactical_slope_selloff_factor = -75

//oneHr_selloff_factor = -100
//tactical_slope_selloff_factor = -100

// Selloff percent settings
selloff_recovery_drop_pct = 1.4

// ------------------
// Buy Hold Settings
// ------------------
// Set slope factors here to determine when a buy hold goes in place. You can use
// these settings to ensure buys are only made when things are looking up. Will hold if
// any of the live values are less than the values set below, for the respective history
// positions
hold_on_slope_rate = true

// Type is window or sides
hold_on_slope_rate_type = sides

// Down slope detect params
slope_1min = -5
slope_5min = -5
slope_15min = -5
slope_30min = -15

// Up slope detect params
slope_1min_over = 5
slope_5min_over = 5
slope_15min_over = 5
slope_30min_over = 15


// Down slope hold params
hold_1min = -90
hold_5min = -90
hold_15min = -90
hold_30min = -90
hold_1hr = -60
hold_2hr = -60
hold_3hr = -60
hold_4hr = -60
hold_1_avg = -45
hold_2_avg = -45
hold_3_avg = -45
hold_4_avg = -55

// Up slope hold params
hold_1min_over = 90
hold_5min_over = 90
hold_15min_over = 90
hold_30min_over = 90
hold_1hr_over = 90
hold_2hr_over = 90
hold_3hr_over = 90
hold_4hr_over = 90
hold_1_avg_over = 90
hold_2_avg_over = 90
hold_3_avg_over = 90
hold_4_avg_over = 90





// When state is "bottom" for type sides, how long to wait 
// before allowing buys, in seconds
hold_on_bottom_limit = 300

// ---------------
// Dynamic Config
// ---------------
// Whether or not the config file changes require a restart of the bot or not
dynamic_config = true

[api]
api_url = https://api.gdax.com
//websocket_url =  wss://ws-feed.gdax.com
websocket_url =  ws://gdaxlocal:8071
api_port = 443
api_passphrase = 
api_key = 
api_secret = 
api_allowed_ip = 

// Network latency simulation in test mode, in ms
test_mode_latency_low = 10
test_mode_latency_high =160


[db]
host = localhost
port = 27017
name = bitbot
col_orders = test_orders
price_history = price_history

[price_history]
col_price = price_history
port=8071
add_to_db_interval = 100
delete_from_db_interval = 60000
history_length = 21600



